{"version":3,"sources":["reducers/bingoTypes.js","components/bingo/BingoCellComponent.jsx","components/bingo/BingoCellContainer.js","reducers/bingoActions.js","components/bingo/BingoRowComponent.jsx","components/bingo/BingoCompletedListComponent.jsx","components/bingo/BingoCompletedListContainer.js","components/bingo/BingoBoardComponent.jsx","components/bingo/BingoBoardContainer.js","reducers/bingoReducer.js","reducers/index.js","initializeStore.js","components/bingo/BingoStartButtonComponent.jsx","components/bingo/BingoStartButtonContainer.js","App.js","serviceWorker.js","index.js"],"names":["CHECK","RESET","BingoCellComponent","props","isStart","react_default","a","createElement","onClick","check","className","checked","number","connect","state","Object","objectSpread","bingoReducer","dispatch","player","type","types","bingoActions","bingo_BingoCellComponent","checkedNumbers","BingoRowComponent","row","map","index","bingo_BingoCellContainer","key","completedList","bingo","split","n","parseInt","join","bingo_BingoCompletedListComponent","BingoBoardComponent","board","bingo_BingoRowComponent","bingo_BingoCompletedListContainer","bingo_BingoBoardComponent","initialBingoBoard","numberArray","i","bingoLength","push","shuffledArray","j","randomNumber","splice","Math","floor","random","length","allBingoList","r","bingoList","backSlashBingo","slashBingo","initialState","board1","board2","turn","allBingoList1","completedBingoList1","allBingoList2","completedBingoList2","handleActions","_handleActions","defineProperty","action","newState","alert","score1","score2","checkScore","toConsumableArray","includes","toString","checkBingo","reducers","combineReducers","initializeStore","createStore","BingStartButtonComponent","reset","BingoStartButtonComponent","store","App","es","bingo_BingoStartButtonContainer","bingo_BingoBoardContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a8f0fea.chunk.js","sourcesContent":["export const CHECK = \"bingo/check\";\nexport const RESET = \"bingo/reset\";\n","import React from \"react\";\nimport \"./BingoCell.css\";\n\nconst BingoCellComponent = props => {\n  if (props.isStart) {\n    return (\n      <div\n        onClick={props.check}\n        className={\"cell\" + (props.checked ? \" checked\" : \"\")}\n      >\n        <span className={\"number\"}>{props.number + 1}</span>\n      </div>\n    );\n  }\n  return <div className={\"cell\"}>&nbsp;</div>;\n};\n\nexport default BingoCellComponent;\n","import React from \"react\";\nimport * as bingoActions from \"../../reducers/bingoActions\";\nimport \"./BingoCell.css\";\nimport BingoCellComponent from \"./BingoCellComponent\";\nimport { connect } from \"react-redux\";\n\nconst BingoCellContainer = props => {\n  const handleCheck = () => {\n    props.check(props.player, props.number);\n  };\n\n  const checked = () => {\n    return props.checkedNumbers[props.number];\n  };\n\n  return (\n    <BingoCellComponent\n      check={handleCheck}\n      checked={checked()}\n      isStart={props.isStart}\n      number={props.number}\n    />\n  );\n};\n\nexport default connect(\n  state => ({ ...state.bingoReducer }),\n  dispatch => ({\n    check: (player, number) => dispatch(bingoActions.check(player, number))\n  })\n)(BingoCellContainer);\n","import * as types from \"./bingoTypes\";\n\nexport function check(player, number) {\n  return { type: types.CHECK, player, number };\n}\n\nexport function reset() {\n  return { type: types.RESET };\n}\n","import React from \"react\";\nimport BingoCellContainer from \"./BingoCellContainer\";\n\nconst BingoRowComponent = props => {\n  return (\n    <div>\n      {props.row.map((number, index) => (\n        <BingoCellContainer key={index} number={number} player={props.player} />\n      ))}\n    </div>\n  );\n};\n\nexport default BingoRowComponent;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst BingoCompletedListComponent = props => {\n  return (\n    <div>\n      <p>완료된 빙고</p>\n      {props.completedList.map(bingo => (\n        <p>\n          {bingo\n            .split(\",\")\n            .map(n => parseInt(n) + 1)\n            .join(\",\")}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default connect(state => ({ ...state.bingoReducer }))(\n  BingoCompletedListComponent\n);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport BingoCompletedListComponent from \"./BingoCompletedListComponent\";\n\nconst BingoCompletedListContainer = props => {\n  return (\n    <BingoCompletedListComponent\n      completedList={props[\"completedBingoList\" + props.player]}\n    />\n  );\n};\n\nexport default connect(state => ({ ...state.bingoReducer }))(\n  BingoCompletedListContainer\n);\n","import React from \"react\";\nimport BingoRowComponent from \"./BingoRowComponent\";\nimport BingoCompletedListContainer from \"./BingoCompletedListContainer\";\n\nconst BingoBoardComponent = props => {\n  return (\n    <div>\n      {props.board.map((row, index) => (\n        <BingoRowComponent key={index} row={row} player={props.player} />\n      ))}\n      <BingoCompletedListContainer player={props.player} />\n    </div>\n  );\n};\n\nexport default BingoBoardComponent;\n","import React from \"react\";\nimport BingoBoardComponent from \"./BingoBoardComponent\";\nimport { connect } from \"react-redux\";\n\nconst BingoBoardContainer = props => {\n  return (\n    <BingoBoardComponent\n      board={props[\"board\" + props.player]}\n      player={props.player}\n    />\n  );\n};\n\nexport default connect(state => ({ ...state.bingoReducer }))(\n  BingoBoardContainer\n);\n","import { handleActions } from \"redux-actions\";\nimport { CHECK, RESET } from \"./bingoTypes\";\n\nconst bingoLength = 5;\n\nconst initialBingoBoard = () => {\n  const numberArray = [];\n  for (let i = 0; i < bingoLength * bingoLength; i++) {\n    numberArray.push(i);\n  }\n\n  const shuffledArray = [];\n  for (let i = 0; i < bingoLength; i++) {\n    const row = [];\n    for (let j = 0; j < bingoLength; j++) {\n      const randomNumber = numberArray.splice(\n        Math.floor(Math.random() * numberArray.length),\n        1\n      )[0];\n      row.push(randomNumber);\n    }\n    shuffledArray.push(row);\n  }\n\n  return shuffledArray;\n};\n\nconst allBingoList = board => {\n  const allBingoList = board.map(r => r);\n\n  for (let i = 0; i < bingoLength; i++) {\n    const bingoList = [];\n    for (let j = 0; j < bingoLength; j++) {\n      bingoList.push(board[j][i]);\n    }\n    allBingoList.push(bingoList);\n  }\n\n  // \\ shape bingo\n  const backSlashBingo = [];\n  // / shape bingo\n  const slashBingo = [];\n\n  for (let i = 0; i < bingoLength; i++) {\n    backSlashBingo.push(board[i][i]);\n    slashBingo.push(board[i][bingoLength - i - 1]);\n  }\n\n  allBingoList.push(backSlashBingo);\n  allBingoList.push(slashBingo);\n\n  return allBingoList;\n};\n\nconst checkBingo = state => {\n  const newState = { ...state };\n  const { allBingoList1, allBingoList2 } = newState;\n\n  const completedBingoList1 = [...state.completedBingoList1];\n  const completedBingoList2 = [...state.completedBingoList2];\n\n  for (let i = 0; i < allBingoList1.length; i++) {\n    for (let j = 0; j < bingoLength; j++) {\n      const bingo = allBingoList1[i];\n      if (!state.checkedNumbers[bingo[j]]) break;\n      if (j === bingoLength - 1) {\n        if (!completedBingoList1.includes(bingo.toString())) {\n          completedBingoList1.push(bingo.toString());\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < allBingoList2.length; i++) {\n    for (let j = 0; j < bingoLength; j++) {\n      const bingo = allBingoList2[i];\n      if (!state.checkedNumbers[bingo[j]]) break;\n      if (j === bingoLength - 1) {\n        if (!completedBingoList2.includes(bingo.toString())) {\n          completedBingoList2.push(bingo.toString());\n        }\n      }\n    }\n  }\n  newState.completedBingoList1 = completedBingoList1;\n  newState.completedBingoList2 = completedBingoList2;\n  return newState;\n};\n\nconst initialState = () => {\n  const board1 = initialBingoBoard();\n  const board2 = initialBingoBoard();\n\n  return {\n    isStart: false,\n    turn: 1,\n    checkedNumbers: {},\n    board1,\n    allBingoList1: allBingoList(board1),\n    completedBingoList1: [],\n    board2,\n    allBingoList2: allBingoList(board2),\n    completedBingoList2: []\n  };\n};\n\nfunction checkScore(state) {\n  const score1 = state.completedBingoList1.length;\n  const score2 = state.completedBingoList2.length;\n  if(score1 >= 5 || score2 >= 5) {\n    if(score1 > score2) {\n      alert(\"1P가 승리하였습니다.\");\n    } else if (score1 < score2) {\n      alert(\"2P가 승리하였습니다.\");\n    } else {\n      alert(\"무승부입니다!\");\n    }\n\n    return initialState();\n  }\n\n  return state;\n}\n\nexport default handleActions(\n  {\n    [CHECK]: (state, action) => {\n      let newState = { ...state };\n      if (state.checkedNumbers[action.number]) {\n        return newState;\n      }\n\n      if (action.player !== state.turn) {\n        alert(\"잘못된 차레입니다.\");\n        return newState;\n      }\n\n      const checkedNumbers = { ...state.checkedNumbers };\n      checkedNumbers[action.number] = true;\n      newState.checkedNumbers = checkedNumbers;\n      newState.turn = newState.turn === 1 ? 2 : 1;\n      newState = checkBingo(newState);\n      newState = checkScore(newState)\n      return newState;\n    },\n    [RESET]: () => {\n      const newState = initialState();\n      newState.isStart = true;\n\n      return newState;\n    }\n  },\n  initialState()\n);\n","import { combineReducers } from \"redux\";\nimport bingoReducer from \"./bingoReducer\";\n\nconst reducers = combineReducers({\n  bingoReducer\n});\n\nexport default reducers;\n","import { createStore } from \"redux\";\nimport reducers from \"./reducers\";\n\nconst initializeStore = () => {\n  const store = createStore(\n    reducers\n  );\n  return store;\n};\n\nexport default initializeStore;\n","import React from \"react\";\n\nconst BingStartButtonComponent = props => {\n  return (\n    <button onClick={props.reset}>\n      {props.isStart ? \"게임 재시작\" : \"게임 시작\"}\n    </button>\n  );\n};\n\nexport default BingStartButtonComponent;\n","import React from \"react\";\nimport BingoStartButtonComponent from \"./BingoStartButtonComponent\";\nimport { connect } from \"react-redux\";\nimport * as bingoActions from \"../../reducers/bingoActions\";\n\nconst BingoStartButtonContainer = props => {\n  const handleReset = () => {\n    props.reset();\n  };\n\n  return (\n    <BingoStartButtonComponent reset={handleReset} isStart={props.isStart} />\n  );\n};\n\nexport default connect(\n  state => ({ ...state.bingoReducer }),\n  dispatch => ({\n    reset: () => dispatch(bingoActions.reset())\n  })\n)(BingoStartButtonContainer);\n","import React from \"react\";\nimport \"./App.css\";\n\nimport BingoBoardContainer from \"./components/bingo/BingoBoardContainer\";\nimport initializeStore from \"./initializeStore\";\nimport { Provider } from \"react-redux\";\nimport BingoStartButtonContainer from \"./components/bingo/BingoStartButtonContainer\";\n\nconst store = initializeStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <BingoStartButtonContainer />\n        <div>1P</div>\n        <BingoBoardContainer player={1} />\n        <div>2P</div>\n        <BingoBoardContainer player={2} />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}